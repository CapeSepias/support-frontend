Comment: Carries out the steps needed to create a Monthly Contributor
StartAt: CreatePaymentMethod
States:
  CreatePaymentMethod:
    Type: Task
    Resource: "${CreatePaymentMethodLambda.Arn}"
    Next: CreateSalesforceContact
    $state_machine_retries
  CreateSalesforceContact:
    Type: Task
    Resource: "${CreateSalesforceContactLambda.Arn}"
    Next: CreateZuoraSubscription
    $state_machine_retries
  CreateZuoraSubscription:
    Type: Task
    Resource: "${CreateZuoraSubscriptionLambda.Arn}"
    Next: ParallelTasks
    $state_machine_retries
  ParallelTasks:
    Type: Parallel
    Branches:
    - StartAt: ContributionCompleted
      States:
        ContributionCompleted:
          Type: Task
          Resource: "${ContributionCompletedLambda.Arn}"
          End: True
    - StartAt: SendThankYouEmail
      States:
        SendThankYouEmail:
          Type: Task
          Resource: "${SendThankYouEmailLambda.Arn}"
          End: True
          Retry: # We don't want to invoke the failure handler for the thank you email because signup has succeeded by this point
          - ErrorEquals:
            - com.gu.support.workers.exceptions.RetryLimited
            IntervalSeconds: 1
            MaxAttempts: 3
            BackoffRate: 2
          - ErrorEquals:
            - com.gu.support.workers.exceptions.RetryUnlimited
            IntervalSeconds: 1
            BackoffRate: 2
    - StartAt: UpdateMembersDataAPI
      States:
        UpdateMembersDataAPI:
          Type: Task
          Resource: "${UpdateMembersDataAPILambda.Arn}"
          End: True
          Retry: # We don't want to invoke the failure handler for the update members data API because signup has succeeded by this point
          - ErrorEquals:
            - com.gu.support.workers.exceptions.RetryLimited
            IntervalSeconds: 1
            MaxAttempts: 3
            BackoffRate: 2
          - ErrorEquals:
            - com.gu.support.workers.exceptions.RetryUnlimited
            IntervalSeconds: 1
            BackoffRate: 2
    Next: WaitForBrowserPoll

  WaitForBrowserPoll:
    Type: Wait
    Seconds: 30
    Comment: |
      This state exists to avoid the situation where the state machine is terminated before the client's polling
      detects that the execution is complete.  This could happen during a deployment when a new state machine
      is created and the old is terminated.
    End: True

  FailureHandler:
    Type: Task
    Resource: "${FailureHandlerLambda.Arn}"
    Next: WaitForBrowserPoll